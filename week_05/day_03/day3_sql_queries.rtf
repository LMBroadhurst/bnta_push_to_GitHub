{\rtf1\ansi\ansicpg1252\cocoartf2638
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red17\green127\blue28;\red0\green0\blue0;\red22\green23\blue255;
\red15\green0\blue170;}
{\*\expandedcolortbl;;\cssrgb\c0\c55686\c14510;\csgray\c0;\cssrgb\c11765\c23529\c100000;
\cssrgb\c7843\c11765\c72549;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab577
\pard\pardeftab577\pardirnatural\partightenfactor0

\f0\fs24 \cf2 -- Day 3\cf3 \
\
\cf4 SELECT\cf3  SUM(movies.takings) \cf4 AS\cf3  total_earnings, directors.\cf5 name\cf3 \
\cf4 FROM\cf3  movies\
\cf4 INNER\cf3  \cf4 JOIN\cf3  directors\
\cf4 ON\cf3  movies.director_id = directors.id\
\cf4 GROUP\cf3  \cf5 BY\cf3  directors.\cf5 name\cf3 ;\
\
\cf4 SELECT\cf3  SUM(movies.takings) \cf4 AS\cf3  total_earnings, directors.\cf5 name\cf3 , directors.id\
\cf4 FROM\cf3  movies\
\cf4 INNER\cf3  \cf4 JOIN\cf3  directors\
\cf4 ON\cf3  movies.director_id = directors.id\
\cf4 GROUP\cf3  \cf5 BY\cf3  directors.id;\
\
\
\
\cf4 SELECT\cf3  \
m.title,\
d.\cf5 name\cf3 ,\
m.takings,\
d.total_earnings,\
m.takings / d.total_earnings::\cf5 FLOAT\cf3  * 100 \cf4 AS\cf3  percentage_of_total\
\cf4 FROM\cf3 \
(\cf4 SELECT\cf3  SUM(movies.takings) \cf4 AS\cf3  total_earnings, directors.\cf5 name\cf3 , directors.id\
\cf4 FROM\cf3  movies\
\cf4 INNER\cf3  \cf4 JOIN\cf3  directors\
\cf4 ON\cf3  movies.director_id = directors.id\
\cf4 GROUP\cf3  \cf5 BY\cf3  directors.id) \cf4 AS\cf3  d\
\cf4 INNER\cf3  \cf4 JOIN\cf3  movies \cf4 AS\cf3  m\
\cf4 ON\cf3  m.director_id = d.id\
\cf4 WHERE\cf3  d.id = 1\
\cf4 ORDER\cf3  \cf5 BY\cf3  percentage_of_total \cf4 DESC\cf3 ;\
\
\
\cf4 WITH\cf3  director_total_earnings (id, \cf5 name\cf3 , total_earnings) \cf4 AS\cf3  (\
	\cf4 SELECT\cf3 \
		directors.id,\
		directors.\cf5 name\cf3 ,\
		SUM(movies.takings) \cf4 AS\cf3  total_earnings\
		\cf4 FROM\cf3  directors\
		\cf4 INNER\cf3  \cf4 JOIN\cf3  movies\
		\cf4 ON\cf3  movies.director_id = directors.id\
		\cf4 GROUP\cf3  \cf5 BY\cf3  directors.id\
)\
\
\cf4 SELECT\cf3  \
m.title,\
d.\cf5 name\cf3 ,\
m.takings,\
d.total_earnings,\
m.takings / d.total_earnings::\cf5 FLOAT\cf3  * 100 \cf4 AS\cf3  percentage_of_total\
\cf4 FROM\cf3 \
director_total_earnings \cf4 AS\cf3  d\
\cf4 INNER\cf3  \cf4 JOIN\cf3  movies \cf4 AS\cf3  m\
\cf4 ON\cf3  m.director_id = d.id\
\cf4 WHERE\cf3  d.id = 1\
\cf4 ORDER\cf3  \cf5 BY\cf3  percentage_of_total \cf4 DESC\cf3 ;\
\
\
\cf4 SELECT\cf3 \
	directors.id,\
	directors.\cf5 name\cf3 ,\
	MIN(movies.takings) \cf4 AS\cf3  lowest_earner,\
	MAX(movies.takings) \cf4 AS\cf3  highest_earner\
\cf4 FROM\cf3  directors\
\cf4 INNER\cf3  \cf4 JOIN\cf3  movies\
\cf4 ON\cf3  movies.director_id = directors.id\
\cf4 GROUP\cf3  \cf5 BY\cf3  directors.id;\
\
\cf4 WITH\cf3  director_max_min (id, \cf5 name\cf3 , lowest_earner, highest_earner) \cf4 AS\cf3  (\
\cf4 SELECT\cf3 \
	directors.id,\
	directors.\cf5 name\cf3 ,\
	MIN(movies.takings) \cf4 AS\cf3  lowest_earner,\
	MAX(movies.takings) \cf4 AS\cf3  highest_earner\
\cf4 FROM\cf3  directors\
\cf4 INNER\cf3  \cf4 JOIN\cf3  movies\
\cf4 ON\cf3  movies.director_id = directors.id\
\cf4 GROUP\cf3  \cf5 BY\cf3  directors.id\
)\
\cf4 SELECT\cf3 \
	AVG(lowest_earner) \cf4 AS\cf3  avg_min,\
	AVG(highest_earner) \cf4 AS\cf3  avg_max\
\cf4 FROM\cf3  director_max_min;\
\
\cf2 -- Window Functions\cf3 \
\
\cf4 SELECT\cf3  \
	SUM(takings) \cf4 as\cf3  total_earnings,\
	AVG(takings) \cf4 as\cf3  average_earnings\
\cf4 FROM\cf3  movies;\
\
\cf4 SELECT\cf3 \
	title,\
	release_date,\
	takings,\
	SUM(takings) \cf5 OVER\cf3  (\cf4 ORDER\cf3  \cf5 BY\cf3  release_date \cf4 DESC\cf3 ) \cf4 AS\cf3  total_earnings\
\cf4 FROM\cf3  movies;\
\
\cf4 SELECT\cf3 \
	title,\
	release_date,\
	takings,\
	SUM(takings) \cf5 OVER\cf3  (\cf4 ORDER\cf3  \cf5 BY\cf3  release_date \cf4 DESC\cf3 ) \cf4 AS\cf3  total_earnings,\
	AVG(takings) \cf5 OVER\cf3  () \cf4 AS\cf3  running_average\
\cf4 FROM\cf3  movies;\
\
\cf4 SELECT\cf3 \
	title,\
	release_date,\
	takings\
\cf4 FROM\cf3  movies\
\cf4 ORDER\cf3  \cf5 BY\cf3  takings \cf4 DESC\cf3 \
\cf4 LIMIT\cf3  50;\
\
\cf2 -- We need to use a common table expression here to get our query to work.\cf3 \
\cf2 -- We need a common table because of the Order of operations in SQL, if we do not use a common table expression percentile does not exist when we need it.\cf3 \
\
\cf4 SELECT\cf3 \
	title,\
	release_date,\
	takings,\
	NTILE(10) \cf5 OVER\cf3  (\cf4 ORDER\cf3  \cf5 BY\cf3  takings \cf4 DESC\cf3 ) \cf4 AS\cf3  percentile\
\cf4 FROM\cf3  movies\
\cf4 WHERE\cf3  percentile = 1;\
\
\cf2 -- Now we use a CTE, to show the top 10% of movies.\cf3 \
\
\cf4 WITH\cf3  taking_percentiles (title, release_date, takings, percentile) \cf4 AS\cf3  (\
\cf4 SELECT\cf3 \
	title,\
	release_date,\
	takings,\
	NTILE(10) \cf5 OVER\cf3  (\cf4 ORDER\cf3  \cf5 BY\cf3  takings \cf4 DESC\cf3 ) \cf4 AS\cf3  percentile\
\cf4 FROM\cf3  movies\
)\
\cf4 SELECT\cf3  * \cf4 FROM\cf3  taking_percentiles \cf4 WHERE\cf3  percentile = 1;\
\
\
\
\cf4 SELECT\cf3 \
	title,\
	release_date,\
	takings,\
	COUNT(*) \cf5 OVER\cf3  (\cf5 PARTITION\cf3  \cf5 BY\cf3  director_id) \cf4 AS\cf3  total_films_by_director\
\cf4 FROM\cf3  movies;\
\
\
\cf2 -- Ranking films by takings for each director\cf3 \
\
\cf4 SELECT\cf3 \
	title,\
	takings,\
	\cf5 name\cf3 ,\
	RANK() \cf5 OVER\cf3  (\cf5 PARTITION\cf3  \cf5 BY\cf3  director_id \cf4 ORDER\cf3  \cf5 BY\cf3  takings \cf4 DESC\cf3 ) \cf4 AS\cf3  director_ranking\
\cf4 FROM\cf3  movies\
\cf4 INNER\cf3  \cf4 JOIN\cf3  directors\
\cf4 ON\cf3  movies.director_id = directors.id\
\cf4 ORDER\cf3  \cf5 BY\cf3  takings \cf4 DESC\cf3 ;}